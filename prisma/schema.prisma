datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String           @id @default(uuid())
  name         String
  email        String           @unique
  avatarUrl    String?          @db.Text
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  resumes      Resume[] // One user can upload multiple resumes
  applications JobApplication[] // User can have many job applications
}

model Resume {
  id             String           @id @default(uuid())
  url            String           @db.Text
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  userId         String
  User           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  JobApplication JobApplication[]

  @@index([userId])
}

model JobApplication {
  id             String            @id @default(uuid())
  jobTitle       String
  company        String
  jobDescription String?           @db.Text // Store scraped job description
  status         ApplicationStatus @default(PENDING)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  userId         String
  resumeId       String?
  coverLetter    CoverLetter?

  User   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Resume Resume? @relation(fields: [resumeId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([resumeId])
}

model CoverLetter {
  id               String         @id @default(uuid())
  content          String         @db.LongText // Store the generated cover letter
  jobApplicationId String         @unique
  JobApplication   JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  createdAt        DateTime       @default(now())
}

enum ApplicationStatus {
  PENDING
  APPLIED
  INTERVIEWING
  OFFER_RECEIVED
  REJECTED
}
